{"id": "1", "title": "Page 1", "text": "Applet Life Cycle in Java \nIn Java, an applet is a special type of program embedded in the web page to generate \ndynamic content. Applet is a class in Java. \nThe applet life cycle can be defined as the process of how the object is created, started, \nstopped, and destroyed during the entire execution of its application. It basically has \nfive core methods namely init(), start(), stop(), paint() and destroy().These methods are \ninvoked by the browser to execute. \nAlong with the browser, the applet also works on the client side, thus having less \nprocessing time. \nMethods of Applet Life Cycle \n \nThere are five methods of an applet life cycle, and they are: \no init(): The init() method is the first method to run that initializes the applet. It \ncan be invoked only once at the time of initialization. The web browser creates \nthe initialized objects, i.e., the web browser (after checking the security settings) \nruns the init() method within the applet. \no start(): The start() method contains the actual code of the applet and starts the \napplet. It is invoked immediately after the init() method is invoked. Every time \nthe browser is loaded or refreshed, the start() method is invoked. It is also \ninvoked whenever the applet is maximized, restored, or moving from one tab", "images": ["page_1_img_1.png"], "images_base64": [{"filename": "page_1_img_1.png", "description": "A diagram illustrating the Java Applet life cycle, depicting the sequence and transitions between methods such as init(), start(), paint(), stop(), and destroy()."}]}
{"id": "2", "title": "Page 2", "text": "to another in the browser. It is in an inactive state until the init() method is \ninvoked. \no stop(): The stop() method stops the execution of the applet. The stop () method \nis invoked whenever the applet is stopped, minimized, or moving from one tab \nto another in the browser, the stop() method is invoked. When we go back to \nthat page, the start() method is invoked again. \no destroy(): The destroy() method destroys the applet after its work is done. It is \ninvoked when the applet window is closed or when the tab containing the \nwebpage is closed. It removes the applet object from memory and is executed \nonly once. We cannot start the applet once it is destroyed. \no paint(): The paint() method belongs to the Graphics class in Java. It is used to \ndraw shapes like circle, square, trapezium, etc., in the applet. It is executed after \nthe start() method and when the browser or applet windows are resized. \nSequence of method execution when an applet is executed: \n1. init() \n2. start() \n3. paint() \nSequence of method execution when an applet is executed: \n1. stop() \n2. destroy() \nApplet Life Cycle Working \no The Java plug-in software is responsible for managing the life cycle of an applet. \no An applet is a Java application executed in any web browser and works on the \nclient-side. It doesn't have the main() method because it runs in the browser. It \nis thus created to be placed on an HTML page. \no The \ninit(), \nstart(), \nstop() \nand \ndestroy() \nmethods \nbelongs \nto \nthe applet.Applet class. \no The paint() method belongs to the awt.Component class. \no In Java, if we want to make a class an Applet class, we need to extend the Applet \no Whenever we create an applet, we are creating the instance of the existing \nApplet class. And thus, we can use all the methods of that class.", "images": [], "images_base64": []}
{"id": "3", "title": "Page 3", "text": "Flow of Applet Life Cycle: \nThese methods are invoked by the browser automatically. There is no need to call them \nexplicitly. \n \n \nSyntax of entire Applet Life Cycle in Java \n1. class TestAppletLifeCycle extends Applet {   \n2. public void init() {   \n3. // initialized objects   \n4. }    \n5. public void start() {   \n6. // code to start the applet    \n7. }   \n8. public void paint(Graphics graphics) {   \n9. // draw the shapes   \n10. }   \n11. public void stop() {   \n12. // code to stop the applet", "images": ["page_3_img_1.png"], "images_base64": [{"filename": "page_3_img_1.png", "description": "A flowchart depicting the flow of the Java Applet life cycle, showing the sequence in which methods like init(), start(), stop(), paint(), and destroy() are invoked by the browser."}]}
{"id": "4", "title": "Page 4", "text": "13. }   \n14. public void destroy() {   \n15. // code to destroy the applet    \n16. }   \n17. }", "images": [], "images_base64": []}
{"id": "5", "title": "Page 5", "text": "Difference Between a Java Application and a Java Applet \nParameters \nJava Application \nJava Applet \nMeaning and \nBasics \nA Java Application is a type of \nprogram that can get \nindependently executed on a \ncomputer. \nA Java Applet is a small \nprogram that makes use of \nanother application program \nso that we can execute it. \nMain() Method \nThe execution of the Java \napplication begins with the \nmain() method. The usage of \nthe main() is a prerequisite here. \nThe Java applet initializes \nthrough the init(). It does not \nrequire the usage of any \nmain() method. \nExecution \nIt cannot run alone, but it \nrequires JRE for its execution. \nIt cannot run independently \nbut requires APIs for its \nexecution (Ex. APIs like Web \nAPI). \nInstallation \nOne needs to install a Java \napplication priorly and explicitly \non a local computer. \nA Java applet does not \nrequire any prior installation. \nCommunication \namong other \nServers \nIt is possible to establish \ncommunication with the other \nservers. \nIt cannot really establish \ncommunication with the \nother servers. \nRead and Write \nOperations \nThe Java applications are \ncapable of performing the read \nand write operations on various \nfiles present in a local computer. \nA Java applet cannot perform \nthese applications on any \nlocal computer. \nRestrictions \nThese can easily access the file \nor data present in a computer \nsystem or device. \nThese cannot access the file \nor data available on any \nsystem or local computers. \nSecurity \nJava applications are pretty \ntrusted, and thus, come with no \nsecurity concerns. \nJava applets are not very \ntrusted. Thus, they require \nsecurity.", "images": [], "images_base64": []}
{"id": "6", "title": "Page 6", "text": "JAVA APPLET Program to Find Sum of Two \nNumbers \n \n \nAt the time creation of a data base, we must embed the applet into the HTML \npage then only it works \n \nStep 1: Create the java program with \" filename.java \". \n \nStep 2: Create the html program with \"filename.html\". \n \nStep 3: Compile the java program \"javac filename.java\". \n \nStep 4: View applet using \"appletviewer filename.html\". \n \nNote: Both program must have the same name and Both program must be in \nsame folder. \n \nJava Program \n1. import java.awt.*;   \n2. import java.awt.event.*;   \n3. import java.applet.*;   \n4. public class Q2 extends Applet implements ActionListener   \n5. {   \n6.     TextField t1 = new TextField(10);   \n7.     TextField t2 = new TextField(10);   \n8.     TextField t3 = new TextField(10);   \n9.     Label l1 = new Label(\"FIRST NO=:\");   \n10.     Label l2 = new Label(\"SECOND NO:\");   \n11.     Label l3 = new Label(\"SUM:\");   \n12.     Button b = new Button(\"ADD\");   \n13.     public void init()   \n14.     {   \n15.         t1.setForeground(Color = Red);   \n16.         add(l1);   \n17.         add(t1);   \n18.         add(l2);   \n19.         add(t2);   \n20.         add(l3);   \n21.         add(t3);   \n22.         add(b);   \n23.         b.addActionListener(this);   \n24.     }   \n25.     public void actionPerformed(ActionEvent e)   \n26.     {", "images": [], "images_base64": []}
{"id": "7", "title": "Page 7", "text": "27.         if (e.getSource() == b)   \n28.         {   \n29.             int n1 = Integer.parseInt(t1.getText());   \n30.             int n2 = Integer.parseInt(t2.getText());   \n31.             t3.setText(\" \" + (n1 + n2));   \n32.         }   \n33.     }   \n34. }   \nHTML Code \n1. <HTML>   \n2.    \n3.     <HEAD>   \n4.         <TITLE>WELCOME TO JAVA APPLET</TITLE>   \n5.     </HEAD>   \n6.    \n7.     <BODY>   \n8.         <CENTER>   \n9.             <H1>WELCOME TO THE APPLET</H1> </CENTER>   \n10.         <BR>   \n11.         <APPLET CODE=Q2.class WIDTH=400 HEIGHT=400> </APP..." }
{"id": "8", "title": "Page 8", "text": "12.     </BODY>\n13.    \n14. </HTML>", "images": [], "images_base64": []}
{"id": "8", "title": "Page 8", "text": "OUTPUT", "images": ["page_8_img_1.png"], "images_base64": [{"filename": "page_8_img_1.png", "description": "A screenshot of the running Java Applet interface for calculating the sum of two numbers, featuring labels 'FIRST NO=:', 'SECOND NO:', 'SUM:', corresponding text fields (with the first field in red text), and an 'ADD' button, displayed within an applet viewer window titled 'WELCOME TO JAVA APPLET'."}]}